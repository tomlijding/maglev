% Magnetic Leviation 
clear all
close all
clc
addpath LTI-toolbox/
addpath Given

%% Modelling: Calibration
ymeas_max = 0.9899; % Maximum measured y [MU]
offset = 0.0075; % Minimum measured y (also called the offset) [MU]
dymeas = ymeas_max - offset; % Difference in the measured distance [MU]
dist = 9e-3; % Maximum distance the ball is able to travel [m]
Ky = dymeas/dist; % The scaling constant from [MU] to [m] = [MU/m]
m =8.37*10^-3; % Mass in kg [kg]
g = 9.81 ;

%% Modelling: System Identification

xdata = [0.4013,0.4183,0.4364,0.4560,0.4736,0.4962,0.5214,0.5424,0.5592,0.5808,0.6024]; % Position (with offset) [MU_x]
xdata = (xdata-offset)/Ky;
ydata = [0.3872,0.3375,0.3693,0.3588,0.3504,0.3411,0.3303,0.3249,0.3121,0.3035,0.2939]; % Current in [MU_i] 
theta_init = [2,0.02]; % Fitting parameters init(1) = k_c*k_i^2/m, init(2) = q_0

fun = @(theta,x)sqrt( (g) / theta(1) ) .* ( theta(2) - x);
theta_est = lsqcurvefit(fun,theta_init,xdata,ydata);
q0 = theta_est(2);
alpha = 1/theta_est(1); % This is m/(k_c*k_i^2)

alpha * (ydata(1)^2) / (q0-xdata(1))^2

%% Identification data run

h = 0.001;
Tsim = 30;
t = [0:h:Tsim]';
u = zeros(size(t));
u_e = 0.27;
t0 = 4;
u(t<t0) = -u_e + u_e*t(t<t0) / t0;

simin = [t, u];

%% Process the data

t_start = 2;
data = out.simout.Data(t_start/h+1:end,:);
x_id = data;
%u_id = data(:,1);
x_avg = sum(x_id)/length(x_id)
%u_avg = sum(u_id)/length(u_id)



%% Testing


%%
kc = 8.0915*10^-6;
x0 = 0.0083;
x_test = xdata(1);
y = fun(kc,x0,x_test,m,g);

